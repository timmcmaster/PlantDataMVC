@model ListViewModelStatic<PlantDataMVC.Web.Models.ViewModels.Genus.GenusListViewModel>

@using Genus = PlantDataMVC.Web.Models.ViewModels.Genus
@{
    Genus.GenusListViewModel sampleElement = new Genus.GenusListViewModel();

    List<object> cols = new List<object>();
    cols.Add(new { field = Model.SortBy, direction = (Model.SortAscending ? "Ascending": "Descending") });
}

<ejs-grid id="GenusGrid" allowSorting="true" actionBegin="beginSort" actionComplete="completeSort">
    <e-data-manager url="@Url.Action("UrlDatasource", "GenusGrid", new { page = Model.PageNumber, pageSize = Model.PageSize, sortBy = Model.SortBy, ascending = Model.SortAscending })" adaptor="UrlAdaptor"></e-data-manager>
@*    <e-grid-pagesettings pageSize="@Model.PageSize"></e-grid-pagesettings>*@    
    <e-grid-sortsettings columns="cols"></e-grid-sortsettings>
    <e-grid-editsettings allowEditing="false" allowDeleting="false"></e-grid-editsettings>
    <e-grid-columns>
        <e-grid-column field="@nameof(sampleElement.Id)" headerText="@Html.DisplayNameFor(x => sampleElement.Id)"></e-grid-column>
        <e-grid-column field="@nameof(sampleElement.LatinName)" headerText="@Html.DisplayNameFor(x => sampleElement.LatinName)"></e-grid-column>
    </e-grid-columns>
</ejs-grid>

<script>
    function beginSort(args) {
        // Get sort column name
        alert(args.requestType + ' ' + args.type); //custom Action

        // And sort type

    }
    function completeSort(args) {
        alert(args.requestType + ' ' + args.type); //custom Action
    }
</script>
<style>

    .e-grid .e-row .e-rowcell {
        padding-top: 3px;
        padding-bottom: 3px;
    }

</style>