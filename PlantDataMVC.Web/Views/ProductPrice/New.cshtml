@using PlantDataMVC.Web.Constants;
@model PlantDataMVC.Web.Models.ViewModels.ProductPrice.ProductPriceNewViewModel

@{
    ViewBag.Title = "New";
}

<h2>New</h2>

<form asp-controller=@PlantDataMvcAppControllers.ProductPrice asp-action="Create">
    <div asp-validation-summary="ModelOnly"></div>
    <fieldset>
        <legend>ProductPrice</legend>

        <input asp-for="PriceListTypeId" type="hidden" />

        <div class="editor-label">
            <label asp-for="PriceListTypeName"></label>
        </div>
        <div class="editor-field">
            @Html.DisplayFor(m => Model.PriceListTypeName)
        </div>

        <div class="editor-label">
            <label asp-for="ProductTypeName"></label>
        </div>
        <div class="editor-field">
            @Html.QueryDropDownFor(
            () => nameof(Model.ProductTypeId),
            model => model.ProductTypeId,
            new ListQuery<ProductTypeDataModel>(),
            p => p.Id,
            p => p.Name)
            <span asp-validation-for="ProductTypeId"></span>
        </div>

        <div class="editor-label">
            <label asp-for="DateEffective"></label>
        </div>
        <div class="editor-field">
            @Html.EditorFor(m => m.DateEffective)
            <span asp-validation-for="DateEffective"></span>
        </div>

        <div class="editor-label">
            <label asp-for="Price"></label>
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Price)
            <span asp-validation-for="Price"></span>
        </div>

        <p>
            <input type="submit" value="Create"/>
        </p>
    </fieldset>
</form>

<div>
    <a asp-controller=@PlantDataMvcAppControllers.PriceListType asp-action="Details" asp-route-id="@Model.PriceListTypeId">Back to Details</a>
</div>