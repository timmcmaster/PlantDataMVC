@model PlantDataMVC.Web.Models.ViewModels.Site.SiteEditViewModel

<style>
    .map {
        height: 400px;
        width: 400px;
    }
</style>

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

<form asp-action="Update" asp-controller="Site">
    <div asp-validation-summary="ModelOnly"></div>
    <fieldset>
        <legend>Site</legend>

        @Html.EditorForModel()

        <p>
            <input type="submit" value="Update" />
        </p>
    </fieldset>
</form>

<!-- This is the div that will contain the map -->
<div id="map" class="map"><div id="popup"></div></div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section Scripts{
        <script type="text/javascript" src="~/js/lib/maplib.bundle.js"></script>
        <script type="text/javascript">

            // This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded.
            $(document).ready(function () {
                Initialise();
            });

            function Initialise() {
                // get siteModel in JSON encoded format
                var latitude = @Html.Raw(Json.Serialize(Model.Latitude));
                var longitude = @Html.Raw(Json.Serialize(Model.Longitude));
                var siteName = @Html.Raw(Json.Serialize(Model.SiteName));
                var centreLat = latitude;
                var centreLong = longitude;
                var zoomLevel = 4;

                // TODO: Need some sort of error on invalid coordinates
                var map = maplib.createMap(document.getElementById('map'), latitude, longitude, zoomLevel);
                maplib.addMarker('@Url.Content("~/images/place-marker.png")', map, centreLat, centreLong, siteName);
            };
        </script>
}

<div>
    <a asp-controller="Site" asp-action="Index">Back to Index</a>
</div>

