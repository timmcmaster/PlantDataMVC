@using PlantDataMVC.Web.Models.ViewComponents.ViewModels;
@using Transaction = PlantDataMVC.Web.Models.ViewModels.Transaction

@model TransactionGridViewModel
@{
    Transaction.TransactionListViewModel sampleElement = new Transaction.TransactionListViewModel();
}
<div class="container-lg">
    <table class="table border">
        <thead>
            <tr>
                @*        <th scope="col">@Html.ColumnHeaderFor(m => sampleElement.Id)</th>
                <th scope="col">@Html.ColumnHeaderFor(m => sampleElement.PlantStockId)</th>
                *@
                <th scope="col">@Html.ColumnHeaderFor(m => sampleElement.TransactionTypeName, Model.Options.AllowSorting)</th>
                <th scope="col">@Html.ColumnHeaderFor(m => sampleElement.TransactionDate, Model.Options.AllowSorting)</th>
                <th scope="col">@Html.ColumnHeaderFor(m => sampleElement.Quantity, Model.Options.AllowSorting)</th>
                <th scope="col">@Html.ColumnHeaderFor(m => sampleElement.EffectiveQuantity, Model.Options.AllowSorting)</th>
            </tr>
        </thead>
        <tbody>
            @{
                int count = 0;
                foreach (var entry in Model.Items)
                {
                    <tr>
                        @*
                <td>@Html.DisplayFor(m => m.ElementAt(count).Id)</td>
                <td>@Html.DisplayFor(m => m.ElementAt(count).PlantStockId)</td>
                *@
                        <td>@Html.DisplayFor(m => m.Items.ElementAt(count).TransactionTypeName)</td>
                        <td>@Html.DisplayFor(m => m.Items.ElementAt(count).TransactionDate)</td>
                        <td>@Html.DisplayFor(m => m.Items.ElementAt(count).Quantity)</td>
                        <td>@Html.DisplayFor(m => m.Items.ElementAt(count).EffectiveQuantity)</td>
                    </tr>
                    count++;
                }
            }
        </tbody>
    </table>
</div>