#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlantDataMvc3.DAL.LinqToSql.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PlantData")]
	internal partial class PlantDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJournalEntry(JournalEntry instance);
    partial void UpdateJournalEntry(JournalEntry instance);
    partial void DeleteJournalEntry(JournalEntry instance);
    partial void InsertJournalEntryType(JournalEntryType instance);
    partial void UpdateJournalEntryType(JournalEntryType instance);
    partial void DeleteJournalEntryType(JournalEntryType instance);
    partial void InsertPlantStock(PlantStock instance);
    partial void UpdatePlantStock(PlantStock instance);
    partial void DeletePlantStock(PlantStock instance);
    partial void InsertPriceListType(PriceListType instance);
    partial void UpdatePriceListType(PriceListType instance);
    partial void DeletePriceListType(PriceListType instance);
    partial void InsertProductPrice(ProductPrice instance);
    partial void UpdateProductPrice(ProductPrice instance);
    partial void DeleteProductPrice(ProductPrice instance);
    partial void InsertProductType(ProductType instance);
    partial void UpdateProductType(ProductType instance);
    partial void DeleteProductType(ProductType instance);
    partial void InsertGenus(Genus instance);
    partial void UpdateGenus(Genus instance);
    partial void DeleteGenus(Genus instance);
    partial void InsertSpecies(Species instance);
    partial void UpdateSpecies(Species instance);
    partial void DeleteSpecies(Species instance);
    partial void InsertSeedTray(SeedTray instance);
    partial void UpdateSeedTray(SeedTray instance);
    partial void DeleteSeedTray(SeedTray instance);
    partial void InsertSite(Site instance);
    partial void UpdateSite(Site instance);
    partial void DeleteSite(Site instance);
    partial void InsertSeedBatch(SeedBatch instance);
    partial void UpdateSeedBatch(SeedBatch instance);
    partial void DeleteSeedBatch(SeedBatch instance);
    #endregion
		
		public PlantDataContext() : 
				base(global::PlantDataMVC3.DAL.LinqToSql.Properties.Settings.Default.PlantDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PlantDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlantDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlantDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlantDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<JournalEntry> JournalEntries
		{
			get
			{
				return this.GetTable<JournalEntry>();
			}
		}
		
		internal System.Data.Linq.Table<JournalEntryType> JournalEntryTypes
		{
			get
			{
				return this.GetTable<JournalEntryType>();
			}
		}
		
		internal System.Data.Linq.Table<PlantStock> PlantStocks
		{
			get
			{
				return this.GetTable<PlantStock>();
			}
		}
		
		internal System.Data.Linq.Table<PriceListType> PriceListTypes
		{
			get
			{
				return this.GetTable<PriceListType>();
			}
		}
		
		internal System.Data.Linq.Table<ProductPrice> ProductPrices
		{
			get
			{
				return this.GetTable<ProductPrice>();
			}
		}
		
		internal System.Data.Linq.Table<ProductType> ProductTypes
		{
			get
			{
				return this.GetTable<ProductType>();
			}
		}
		
		internal System.Data.Linq.Table<Genus> Genus
		{
			get
			{
				return this.GetTable<Genus>();
			}
		}
		
		internal System.Data.Linq.Table<Species> Species
		{
			get
			{
				return this.GetTable<Species>();
			}
		}
		
		internal System.Data.Linq.Table<SeedTray> SeedTrays
		{
			get
			{
				return this.GetTable<SeedTray>();
			}
		}
		
		public System.Data.Linq.Table<Site> Sites
		{
			get
			{
				return this.GetTable<Site>();
			}
		}
		
		public System.Data.Linq.Table<SeedBatch> SeedBatches
		{
			get
			{
				return this.GetTable<SeedBatch>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSpeciesByGenus", IsComposable=true)]
		internal IQueryable<GetSpeciesByGenusResult> GetSpeciesByGenus([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(30)")] string genusName)
		{
			return this.CreateMethodCallQuery<GetSpeciesByGenusResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), genusName);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertSpecies")]
		internal int InsertSpecies([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(30)")] string genusName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(30)")] string speciesName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(50)")] string commonName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(200)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> maxPropagationTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> isNative)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), genusName, speciesName, commonName, description, maxPropagationTime, isNative);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateSpecies")]
		internal int UpdateSpecies([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> speciesId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(30)")] string genusName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(30)")] string speciesName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), speciesId, genusName, speciesName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertSeedBatchBySpeciesId")]
		internal int InsertSeedBatchBySpeciesId([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> speciesId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> dateCollected, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(30)")] string location)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), speciesId, dateCollected, location);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertSeedTrayByBatchId")]
		internal int InsertSeedTrayByBatchId([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> batchId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> datePlanted, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(50)")] string treatment, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> disposed)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), batchId, datePlanted, treatment, disposed);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetPrice", IsComposable=true)]
		internal System.Nullable<decimal> GetPrice([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> pricelistId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> productTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> transactionDate)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pricelistId, productTypeId, transactionDate).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JournalEntry")]
	public partial class JournalEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PlantStockId;
		
		private int _Quantity;
		
		private int _JournalEntryTypeId;
		
		private System.DateTime _TransactionDate;
		
		private string _Source;
		
		private System.Nullable<int> _SeedTrayId;
		
		private string _Notes;
		
		private EntityRef<JournalEntryType> _JournalEntryType;
		
		private EntityRef<PlantStock> _PlantStock;
		
		private EntityRef<SeedTray> _SeedTray;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlantStockIdChanging(int value);
    partial void OnPlantStockIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnJournalEntryTypeIdChanging(int value);
    partial void OnJournalEntryTypeIdChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnSeedTrayIdChanging(System.Nullable<int> value);
    partial void OnSeedTrayIdChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public JournalEntry()
		{
			this._JournalEntryType = default(EntityRef<JournalEntryType>);
			this._PlantStock = default(EntityRef<PlantStock>);
			this._SeedTray = default(EntityRef<SeedTray>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantStockId", DbType="Int NOT NULL")]
		public int PlantStockId
		{
			get
			{
				return this._PlantStockId;
			}
			set
			{
				if ((this._PlantStockId != value))
				{
					if (this._PlantStock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlantStockIdChanging(value);
					this.SendPropertyChanging();
					this._PlantStockId = value;
					this.SendPropertyChanged("PlantStockId");
					this.OnPlantStockIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JournalEntryTypeId", DbType="Int NOT NULL")]
		public int JournalEntryTypeId
		{
			get
			{
				return this._JournalEntryTypeId;
			}
			set
			{
				if ((this._JournalEntryTypeId != value))
				{
					if (this._JournalEntryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJournalEntryTypeIdChanging(value);
					this.SendPropertyChanging();
					this._JournalEntryTypeId = value;
					this.SendPropertyChanged("JournalEntryTypeId");
					this.OnJournalEntryTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="Date NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(50)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedTrayId", DbType="Int")]
		public System.Nullable<int> SeedTrayId
		{
			get
			{
				return this._SeedTrayId;
			}
			set
			{
				if ((this._SeedTrayId != value))
				{
					if (this._SeedTray.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeedTrayIdChanging(value);
					this.SendPropertyChanging();
					this._SeedTrayId = value;
					this.SendPropertyChanged("SeedTrayId");
					this.OnSeedTrayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(50)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JournalEntryType_JournalEntry", Storage="_JournalEntryType", ThisKey="JournalEntryTypeId", OtherKey="Id", IsForeignKey=true)]
		internal JournalEntryType JournalEntryType
		{
			get
			{
				return this._JournalEntryType.Entity;
			}
			set
			{
				JournalEntryType previousValue = this._JournalEntryType.Entity;
				if (((previousValue != value) 
							|| (this._JournalEntryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JournalEntryType.Entity = null;
						previousValue.JournalEntries.Remove(this);
					}
					this._JournalEntryType.Entity = value;
					if ((value != null))
					{
						value.JournalEntries.Add(this);
						this._JournalEntryTypeId = value.Id;
					}
					else
					{
						this._JournalEntryTypeId = default(int);
					}
					this.SendPropertyChanged("JournalEntryType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantStock_JournalEntry", Storage="_PlantStock", ThisKey="PlantStockId", OtherKey="Id", IsForeignKey=true)]
		internal PlantStock PlantStock
		{
			get
			{
				return this._PlantStock.Entity;
			}
			set
			{
				PlantStock previousValue = this._PlantStock.Entity;
				if (((previousValue != value) 
							|| (this._PlantStock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlantStock.Entity = null;
						previousValue.JournalEntries.Remove(this);
					}
					this._PlantStock.Entity = value;
					if ((value != null))
					{
						value.JournalEntries.Add(this);
						this._PlantStockId = value.Id;
					}
					else
					{
						this._PlantStockId = default(int);
					}
					this.SendPropertyChanged("PlantStock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeedTray_JournalEntry", Storage="_SeedTray", ThisKey="SeedTrayId", OtherKey="Id", IsForeignKey=true)]
		internal SeedTray SeedTray
		{
			get
			{
				return this._SeedTray.Entity;
			}
			set
			{
				SeedTray previousValue = this._SeedTray.Entity;
				if (((previousValue != value) 
							|| (this._SeedTray.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SeedTray.Entity = null;
						previousValue.JournalEntries.Remove(this);
					}
					this._SeedTray.Entity = value;
					if ((value != null))
					{
						value.JournalEntries.Add(this);
						this._SeedTrayId = value.Id;
					}
					else
					{
						this._SeedTrayId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SeedTray");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JournalEntryType")]
	public partial class JournalEntryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Effect;
		
		private EntitySet<JournalEntry> _JournalEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEffectChanging(int value);
    partial void OnEffectChanged();
    #endregion
		
		public JournalEntryType()
		{
			this._JournalEntries = new EntitySet<JournalEntry>(new Action<JournalEntry>(this.attach_JournalEntries), new Action<JournalEntry>(this.detach_JournalEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effect", DbType="Int NOT NULL")]
		public int Effect
		{
			get
			{
				return this._Effect;
			}
			set
			{
				if ((this._Effect != value))
				{
					this.OnEffectChanging(value);
					this.SendPropertyChanging();
					this._Effect = value;
					this.SendPropertyChanged("Effect");
					this.OnEffectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JournalEntryType_JournalEntry", Storage="_JournalEntries", ThisKey="Id", OtherKey="JournalEntryTypeId")]
		internal EntitySet<JournalEntry> JournalEntries
		{
			get
			{
				return this._JournalEntries;
			}
			set
			{
				this._JournalEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.JournalEntryType = this;
		}
		
		private void detach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.JournalEntryType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlantStock")]
	public partial class PlantStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SpeciesId;
		
		private int _ProductTypeId;
		
		private int _QuantityInStock;
		
		private EntitySet<JournalEntry> _JournalEntries;
		
		private EntityRef<ProductType> _ProductType;
		
		private EntityRef<Species> _Species;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpeciesIdChanging(int value);
    partial void OnSpeciesIdChanged();
    partial void OnProductTypeIdChanging(int value);
    partial void OnProductTypeIdChanged();
    partial void OnQuantityInStockChanging(int value);
    partial void OnQuantityInStockChanged();
    #endregion
		
		public PlantStock()
		{
			this._JournalEntries = new EntitySet<JournalEntry>(new Action<JournalEntry>(this.attach_JournalEntries), new Action<JournalEntry>(this.detach_JournalEntries));
			this._ProductType = default(EntityRef<ProductType>);
			this._Species = default(EntityRef<Species>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesId", DbType="Int NOT NULL")]
		public int SpeciesId
		{
			get
			{
				return this._SpeciesId;
			}
			set
			{
				if ((this._SpeciesId != value))
				{
					if (this._Species.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpeciesIdChanging(value);
					this.SendPropertyChanging();
					this._SpeciesId = value;
					this.SendPropertyChanged("SpeciesId");
					this.OnSpeciesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeId", DbType="Int NOT NULL")]
		public int ProductTypeId
		{
			get
			{
				return this._ProductTypeId;
			}
			set
			{
				if ((this._ProductTypeId != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeId = value;
					this.SendPropertyChanged("ProductTypeId");
					this.OnProductTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityInStock", DbType="Int NOT NULL")]
		public int QuantityInStock
		{
			get
			{
				return this._QuantityInStock;
			}
			set
			{
				if ((this._QuantityInStock != value))
				{
					this.OnQuantityInStockChanging(value);
					this.SendPropertyChanging();
					this._QuantityInStock = value;
					this.SendPropertyChanged("QuantityInStock");
					this.OnQuantityInStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantStock_JournalEntry", Storage="_JournalEntries", ThisKey="Id", OtherKey="PlantStockId")]
		internal EntitySet<JournalEntry> JournalEntries
		{
			get
			{
				return this._JournalEntries;
			}
			set
			{
				this._JournalEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_PlantStock", Storage="_ProductType", ThisKey="ProductTypeId", OtherKey="Id", IsForeignKey=true)]
		internal ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.PlantStocks.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.PlantStocks.Add(this);
						this._ProductTypeId = value.Id;
					}
					else
					{
						this._ProductTypeId = default(int);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Species_PlantStock", Storage="_Species", ThisKey="SpeciesId", OtherKey="Id", IsForeignKey=true)]
		public Species Species
		{
			get
			{
				return this._Species.Entity;
			}
			set
			{
				Species previousValue = this._Species.Entity;
				if (((previousValue != value) 
							|| (this._Species.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Species.Entity = null;
						previousValue.PlantStocks.Remove(this);
					}
					this._Species.Entity = value;
					if ((value != null))
					{
						value.PlantStocks.Add(this);
						this._SpeciesId = value.Id;
					}
					else
					{
						this._SpeciesId = default(int);
					}
					this.SendPropertyChanged("Species");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.PlantStock = this;
		}
		
		private void detach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.PlantStock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceListType")]
	public partial class PriceListType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Kind;
		
		private EntitySet<ProductPrice> _ProductPrices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnKindChanging(string value);
    partial void OnKindChanged();
    #endregion
		
		public PriceListType()
		{
			this._ProductPrices = new EntitySet<ProductPrice>(new Action<ProductPrice>(this.attach_ProductPrices), new Action<ProductPrice>(this.detach_ProductPrices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kind", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string Kind
		{
			get
			{
				return this._Kind;
			}
			set
			{
				if ((this._Kind != value))
				{
					this.OnKindChanging(value);
					this.SendPropertyChanging();
					this._Kind = value;
					this.SendPropertyChanged("Kind");
					this.OnKindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceListType_ProductPrice", Storage="_ProductPrices", ThisKey="Id", OtherKey="PriceListTypeId")]
		internal EntitySet<ProductPrice> ProductPrices
		{
			get
			{
				return this._ProductPrices;
			}
			set
			{
				this._ProductPrices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.PriceListType = this;
		}
		
		private void detach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.PriceListType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductPrice")]
	public partial class ProductPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PriceListId;
		
		private int _ProductTypeId;
		
		private decimal _Price;
		
		private System.DateTime _DateEffective;
		
		private EntityRef<PriceListType> _PriceListType;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceListTypeIdChanging(int value);
    partial void OnPriceListTypeIdChanged();
    partial void OnProductTypeIdChanging(int value);
    partial void OnProductTypeIdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDateEffectiveChanging(System.DateTime value);
    partial void OnDateEffectiveChanged();
    #endregion
		
		public ProductPrice()
		{
			this._PriceListType = default(EntityRef<PriceListType>);
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PriceListTypeId
		{
			get
			{
				return this._PriceListId;
			}
			set
			{
				if ((this._PriceListId != value))
				{
					if (this._PriceListType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceListTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PriceListId = value;
					this.SendPropertyChanged("PriceListTypeId");
					this.OnPriceListTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductTypeId
		{
			get
			{
				return this._ProductTypeId;
			}
			set
			{
				if ((this._ProductTypeId != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeId = value;
					this.SendPropertyChanged("ProductTypeId");
					this.OnProductTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEffective", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DateEffective
		{
			get
			{
				return this._DateEffective;
			}
			set
			{
				if ((this._DateEffective != value))
				{
					this.OnDateEffectiveChanging(value);
					this.SendPropertyChanging();
					this._DateEffective = value;
					this.SendPropertyChanged("DateEffective");
					this.OnDateEffectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceListType_ProductPrice", Storage="_PriceListType", ThisKey="PriceListTypeId", OtherKey="Id", IsForeignKey=true)]
		internal PriceListType PriceListType
		{
			get
			{
				return this._PriceListType.Entity;
			}
			set
			{
				PriceListType previousValue = this._PriceListType.Entity;
				if (((previousValue != value) 
							|| (this._PriceListType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceListType.Entity = null;
						previousValue.ProductPrices.Remove(this);
					}
					this._PriceListType.Entity = value;
					if ((value != null))
					{
						value.ProductPrices.Add(this);
						this._PriceListId = value.Id;
					}
					else
					{
						this._PriceListId = default(int);
					}
					this.SendPropertyChanged("PriceListType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_ProductPrice", Storage="_ProductType", ThisKey="ProductTypeId", OtherKey="Id", IsForeignKey=true)]
		internal ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.ProductPrices.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.ProductPrices.Add(this);
						this._ProductTypeId = value.Id;
					}
					else
					{
						this._ProductTypeId = default(int);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductType")]
	public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<PlantStock> _PlantStocks;
		
		private EntitySet<ProductPrice> _ProductPrices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProductType()
		{
			this._PlantStocks = new EntitySet<PlantStock>(new Action<PlantStock>(this.attach_PlantStocks), new Action<PlantStock>(this.detach_PlantStocks));
			this._ProductPrices = new EntitySet<ProductPrice>(new Action<ProductPrice>(this.attach_ProductPrices), new Action<ProductPrice>(this.detach_ProductPrices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_PlantStock", Storage="_PlantStocks", ThisKey="Id", OtherKey="ProductTypeId")]
		internal EntitySet<PlantStock> PlantStocks
		{
			get
			{
				return this._PlantStocks;
			}
			set
			{
				this._PlantStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_ProductPrice", Storage="_ProductPrices", ThisKey="Id", OtherKey="ProductTypeId")]
		internal EntitySet<ProductPrice> ProductPrices
		{
			get
			{
				return this._ProductPrices;
			}
			set
			{
				this._ProductPrices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlantStocks(PlantStock entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_PlantStocks(PlantStock entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
		
		private void attach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_ProductPrices(ProductPrice entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genus")]
	public partial class Genus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LatinName;
		
		private EntitySet<Species> _Species;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLatinNameChanging(string value);
    partial void OnLatinNameChanged();
    #endregion
		
		public Genus()
		{
			this._Species = new EntitySet<Species>(new Action<Species>(this.attach_Species), new Action<Species>(this.detach_Species));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatinName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string LatinName
		{
			get
			{
				return this._LatinName;
			}
			set
			{
				if ((this._LatinName != value))
				{
					this.OnLatinNameChanging(value);
					this.SendPropertyChanging();
					this._LatinName = value;
					this.SendPropertyChanged("LatinName");
					this.OnLatinNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genus_Species", Storage="_Species", ThisKey="Id", OtherKey="GenusId")]
		internal EntitySet<Species> Species
		{
			get
			{
				return this._Species;
			}
			set
			{
				this._Species.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Species(Species entity)
		{
			this.SendPropertyChanging();
			entity.Genus = this;
		}
		
		private void detach_Species(Species entity)
		{
			this.SendPropertyChanging();
			entity.Genus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Species")]
	public partial class Species : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GenusId;
		
		private string _LatinName;
		
		private string _CommonName;
		
		private string _Description;
		
		private System.Nullable<int> _PropagationTime;
		
		private bool _Native;
		
		private EntitySet<PlantStock> _PlantStocks;
		
		private EntitySet<SeedBatch> _SeedBatches;
		
		private EntityRef<Genus> _Genus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGenusIdChanging(int value);
    partial void OnGenusIdChanged();
    partial void OnLatinNameChanging(string value);
    partial void OnLatinNameChanged();
    partial void OnCommonNameChanging(string value);
    partial void OnCommonNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPropagationTimeChanging(System.Nullable<int> value);
    partial void OnPropagationTimeChanged();
    partial void OnNativeChanging(bool value);
    partial void OnNativeChanged();
    #endregion
		
		public Species()
		{
			this._PlantStocks = new EntitySet<PlantStock>(new Action<PlantStock>(this.attach_PlantStocks), new Action<PlantStock>(this.detach_PlantStocks));
			this._SeedBatches = new EntitySet<SeedBatch>(new Action<SeedBatch>(this.attach_SeedBatches), new Action<SeedBatch>(this.detach_SeedBatches));
			this._Genus = default(EntityRef<Genus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenusId", DbType="Int NOT NULL")]
		public int GenusId
		{
			get
			{
				return this._GenusId;
			}
			set
			{
				if ((this._GenusId != value))
				{
					if (this._Genus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenusIdChanging(value);
					this.SendPropertyChanging();
					this._GenusId = value;
					this.SendPropertyChanged("GenusId");
					this.OnGenusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatinName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string LatinName
		{
			get
			{
				return this._LatinName;
			}
			set
			{
				if ((this._LatinName != value))
				{
					this.OnLatinNameChanging(value);
					this.SendPropertyChanging();
					this._LatinName = value;
					this.SendPropertyChanged("LatinName");
					this.OnLatinNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommonName", DbType="NChar(50)")]
		public string CommonName
		{
			get
			{
				return this._CommonName;
			}
			set
			{
				if ((this._CommonName != value))
				{
					this.OnCommonNameChanging(value);
					this.SendPropertyChanging();
					this._CommonName = value;
					this.SendPropertyChanged("CommonName");
					this.OnCommonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropagationTime", DbType="Int")]
		public System.Nullable<int> PropagationTime
		{
			get
			{
				return this._PropagationTime;
			}
			set
			{
				if ((this._PropagationTime != value))
				{
					this.OnPropagationTimeChanging(value);
					this.SendPropertyChanging();
					this._PropagationTime = value;
					this.SendPropertyChanged("PropagationTime");
					this.OnPropagationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Native", DbType="Bit NOT NULL")]
		public bool Native
		{
			get
			{
				return this._Native;
			}
			set
			{
				if ((this._Native != value))
				{
					this.OnNativeChanging(value);
					this.SendPropertyChanging();
					this._Native = value;
					this.SendPropertyChanged("Native");
					this.OnNativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Species_PlantStock", Storage="_PlantStocks", ThisKey="Id", OtherKey="SpeciesId")]
		public EntitySet<PlantStock> PlantStocks
		{
			get
			{
				return this._PlantStocks;
			}
			set
			{
				this._PlantStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Species_SeedBatch", Storage="_SeedBatches", ThisKey="Id", OtherKey="SpeciesId")]
		public EntitySet<SeedBatch> SeedBatches
		{
			get
			{
				return this._SeedBatches;
			}
			set
			{
				this._SeedBatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genus_Species", Storage="_Genus", ThisKey="GenusId", OtherKey="Id", IsForeignKey=true)]
		internal Genus Genus
		{
			get
			{
				return this._Genus.Entity;
			}
			set
			{
				Genus previousValue = this._Genus.Entity;
				if (((previousValue != value) 
							|| (this._Genus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genus.Entity = null;
						previousValue.Species.Remove(this);
					}
					this._Genus.Entity = value;
					if ((value != null))
					{
						value.Species.Add(this);
						this._GenusId = value.Id;
					}
					else
					{
						this._GenusId = default(int);
					}
					this.SendPropertyChanged("Genus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlantStocks(PlantStock entity)
		{
			this.SendPropertyChanging();
			entity.Species = this;
		}
		
		private void detach_PlantStocks(PlantStock entity)
		{
			this.SendPropertyChanging();
			entity.Species = null;
		}
		
		private void attach_SeedBatches(SeedBatch entity)
		{
			this.SendPropertyChanging();
			entity.Species = this;
		}
		
		private void detach_SeedBatches(SeedBatch entity)
		{
			this.SendPropertyChanging();
			entity.Species = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeedTray")]
	public partial class SeedTray : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SeedBatchId;
		
		private System.DateTime _DatePlanted;
		
		private string _Treatment;
		
		private bool _ThrownOut;
		
		private EntitySet<JournalEntry> _JournalEntries;
		
		private EntityRef<SeedBatch> _SeedBatch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSeedBatchIdChanging(int value);
    partial void OnSeedBatchIdChanged();
    partial void OnDatePlantedChanging(System.DateTime value);
    partial void OnDatePlantedChanged();
    partial void OnTreatmentChanging(string value);
    partial void OnTreatmentChanged();
    partial void OnThrownOutChanging(bool value);
    partial void OnThrownOutChanged();
    #endregion
		
		public SeedTray()
		{
			this._JournalEntries = new EntitySet<JournalEntry>(new Action<JournalEntry>(this.attach_JournalEntries), new Action<JournalEntry>(this.detach_JournalEntries));
			this._SeedBatch = default(EntityRef<SeedBatch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedBatchId", DbType="Int NOT NULL")]
		public int SeedBatchId
		{
			get
			{
				return this._SeedBatchId;
			}
			set
			{
				if ((this._SeedBatchId != value))
				{
					if (this._SeedBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeedBatchIdChanging(value);
					this.SendPropertyChanging();
					this._SeedBatchId = value;
					this.SendPropertyChanged("SeedBatchId");
					this.OnSeedBatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePlanted", DbType="Date NOT NULL")]
		public System.DateTime DatePlanted
		{
			get
			{
				return this._DatePlanted;
			}
			set
			{
				if ((this._DatePlanted != value))
				{
					this.OnDatePlantedChanging(value);
					this.SendPropertyChanging();
					this._DatePlanted = value;
					this.SendPropertyChanged("DatePlanted");
					this.OnDatePlantedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Treatment", DbType="NChar(50)")]
		public string Treatment
		{
			get
			{
				return this._Treatment;
			}
			set
			{
				if ((this._Treatment != value))
				{
					this.OnTreatmentChanging(value);
					this.SendPropertyChanging();
					this._Treatment = value;
					this.SendPropertyChanged("Treatment");
					this.OnTreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThrownOut", DbType="Bit NOT NULL")]
		public bool ThrownOut
		{
			get
			{
				return this._ThrownOut;
			}
			set
			{
				if ((this._ThrownOut != value))
				{
					this.OnThrownOutChanging(value);
					this.SendPropertyChanging();
					this._ThrownOut = value;
					this.SendPropertyChanged("ThrownOut");
					this.OnThrownOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeedTray_JournalEntry", Storage="_JournalEntries", ThisKey="Id", OtherKey="SeedTrayId")]
		internal EntitySet<JournalEntry> JournalEntries
		{
			get
			{
				return this._JournalEntries;
			}
			set
			{
				this._JournalEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeedBatch_SeedTray", Storage="_SeedBatch", ThisKey="SeedBatchId", OtherKey="Id", IsForeignKey=true)]
		public SeedBatch SeedBatch
		{
			get
			{
				return this._SeedBatch.Entity;
			}
			set
			{
				SeedBatch previousValue = this._SeedBatch.Entity;
				if (((previousValue != value) 
							|| (this._SeedBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SeedBatch.Entity = null;
						previousValue.SeedTrays.Remove(this);
					}
					this._SeedBatch.Entity = value;
					if ((value != null))
					{
						value.SeedTrays.Add(this);
						this._SeedBatchId = value.Id;
					}
					else
					{
						this._SeedBatchId = default(int);
					}
					this.SendPropertyChanged("SeedBatch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.SeedTray = this;
		}
		
		private void detach_JournalEntries(JournalEntry entity)
		{
			this.SendPropertyChanging();
			entity.SeedTray = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Site")]
	public partial class Site : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SiteName;
		
		private string _Suburb;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private EntitySet<SeedBatch> _SeedBatches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSiteNameChanging(string value);
    partial void OnSiteNameChanged();
    partial void OnSuburbChanging(string value);
    partial void OnSuburbChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Site()
		{
			this._SeedBatches = new EntitySet<SeedBatch>(new Action<SeedBatch>(this.attach_SeedBatches), new Action<SeedBatch>(this.detach_SeedBatches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteName", DbType="NVarChar(50)")]
		public string SiteName
		{
			get
			{
				return this._SiteName;
			}
			set
			{
				if ((this._SiteName != value))
				{
					this.OnSiteNameChanging(value);
					this.SendPropertyChanging();
					this._SiteName = value;
					this.SendPropertyChanged("SiteName");
					this.OnSiteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suburb", DbType="NVarChar(50)")]
		public string Suburb
		{
			get
			{
				return this._Suburb;
			}
			set
			{
				if ((this._Suburb != value))
				{
					this.OnSuburbChanging(value);
					this.SendPropertyChanging();
					this._Suburb = value;
					this.SendPropertyChanged("Suburb");
					this.OnSuburbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_SeedBatch", Storage="_SeedBatches", ThisKey="Id", OtherKey="SiteId")]
		public EntitySet<SeedBatch> SeedBatches
		{
			get
			{
				return this._SeedBatches;
			}
			set
			{
				this._SeedBatches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SeedBatches(SeedBatch entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_SeedBatches(SeedBatch entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeedBatch")]
	public partial class SeedBatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SpeciesId;
		
		private System.DateTime _DateCollected;
		
		private string _Location;
		
		private string _Notes;
		
		private System.Nullable<int> _SiteId;
		
		private EntitySet<SeedTray> _SeedTrays;
		
		private EntityRef<Site> _Site;
		
		private EntityRef<Species> _Species;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpeciesIdChanging(int value);
    partial void OnSpeciesIdChanged();
    partial void OnDateCollectedChanging(System.DateTime value);
    partial void OnDateCollectedChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnSiteIdChanging(System.Nullable<int> value);
    partial void OnSiteIdChanged();
    #endregion
		
		public SeedBatch()
		{
			this._SeedTrays = new EntitySet<SeedTray>(new Action<SeedTray>(this.attach_SeedTrays), new Action<SeedTray>(this.detach_SeedTrays));
			this._Site = default(EntityRef<Site>);
			this._Species = default(EntityRef<Species>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeciesId", DbType="Int NOT NULL")]
		public int SpeciesId
		{
			get
			{
				return this._SpeciesId;
			}
			set
			{
				if ((this._SpeciesId != value))
				{
					if (this._Species.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpeciesIdChanging(value);
					this.SendPropertyChanging();
					this._SpeciesId = value;
					this.SendPropertyChanged("SpeciesId");
					this.OnSpeciesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCollected", DbType="Date NOT NULL")]
		public System.DateTime DateCollected
		{
			get
			{
				return this._DateCollected;
			}
			set
			{
				if ((this._DateCollected != value))
				{
					this.OnDateCollectedChanging(value);
					this.SendPropertyChanging();
					this._DateCollected = value;
					this.SendPropertyChanged("DateCollected");
					this.OnDateCollectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(30)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(200)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int")]
		public System.Nullable<int> SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeedBatch_SeedTray", Storage="_SeedTrays", ThisKey="Id", OtherKey="SeedBatchId")]
		public EntitySet<SeedTray> SeedTrays
		{
			get
			{
				return this._SeedTrays;
			}
			set
			{
				this._SeedTrays.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Site_SeedBatch", Storage="_Site", ThisKey="SiteId", OtherKey="Id", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.SeedBatches.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.SeedBatches.Add(this);
						this._SiteId = value.Id;
					}
					else
					{
						this._SiteId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Species_SeedBatch", Storage="_Species", ThisKey="SpeciesId", OtherKey="Id", IsForeignKey=true)]
		public Species Species
		{
			get
			{
				return this._Species.Entity;
			}
			set
			{
				Species previousValue = this._Species.Entity;
				if (((previousValue != value) 
							|| (this._Species.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Species.Entity = null;
						previousValue.SeedBatches.Remove(this);
					}
					this._Species.Entity = value;
					if ((value != null))
					{
						value.SeedBatches.Add(this);
						this._SpeciesId = value.Id;
					}
					else
					{
						this._SpeciesId = default(int);
					}
					this.SendPropertyChanged("Species");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SeedTrays(SeedTray entity)
		{
			this.SendPropertyChanging();
			entity.SeedBatch = this;
		}
		
		private void detach_SeedTrays(SeedTray entity)
		{
			this.SendPropertyChanging();
			entity.SeedBatch = null;
		}
	}
	
	public partial class GetSpeciesByGenusResult
	{
		
		private int _ID;
		
		private int _GenusID;
		
		private string _Species;
		
		private string _CommonName;
		
		private string _Description;
		
		private System.Nullable<int> _PropagationTime;
		
		private bool _Native;
		
		public GetSpeciesByGenusResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenusID", DbType="Int NOT NULL")]
		public int GenusID
		{
			get
			{
				return this._GenusID;
			}
			set
			{
				if ((this._GenusID != value))
				{
					this._GenusID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Species", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Species
		{
			get
			{
				return this._Species;
			}
			set
			{
				if ((this._Species != value))
				{
					this._Species = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommonName", DbType="NChar(50)")]
		public string CommonName
		{
			get
			{
				return this._CommonName;
			}
			set
			{
				if ((this._CommonName != value))
				{
					this._CommonName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropagationTime", DbType="Int")]
		public System.Nullable<int> PropagationTime
		{
			get
			{
				return this._PropagationTime;
			}
			set
			{
				if ((this._PropagationTime != value))
				{
					this._PropagationTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Native", DbType="Bit NOT NULL")]
		public bool Native
		{
			get
			{
				return this._Native;
			}
			set
			{
				if ((this._Native != value))
				{
					this._Native = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
