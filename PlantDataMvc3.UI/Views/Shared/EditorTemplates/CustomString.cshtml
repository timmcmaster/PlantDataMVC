@model System.String
           
@using System.Linq
@using System.Web;
@using System.Web.Mvc;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;

@*@if (!(ViewData.ModelMetadata.ModelType == typeof(System.String)))
{
    @Html.TextBox("", ViewData.TemplateInfo.FormattedModelValue, new { @class = "text-box single-line" })
}
else
{
*@
  
@{  
    int NarrowLength = 10;
    int WideLength = 40;
    int MultilineLength = 100;

    // get the memberInfo for this property from it's container type   
    MemberInfo memberInfo = ViewData.ModelMetadata.ContainerType.GetMembers().FirstOrDefault(mi => mi.Name == ViewData.ModelMetadata.PropertyName);

    StringLengthAttribute stringLengthAttribute = memberInfo.GetCustomAttributes(typeof(StringLengthAttribute), false).FirstOrDefault() as StringLengthAttribute;
    if (stringLengthAttribute != null)
    {
        int maxLength = stringLengthAttribute.MaximumLength;

        if (maxLength <= NarrowLength)
        {
            // use narrow style
                @Html.TextBox("", ViewData.TemplateInfo.FormattedModelValue, new { @class = "text-box single-line narrow" })
        }
        else if (maxLength <= WideLength)
        {
            // use default style
            @Html.TextBox("", ViewData.TemplateInfo.FormattedModelValue, new { @class = "text-box single-line" })
        }
        else if (maxLength <= MultilineLength)
        {
            // use wide style
            @Html.TextBox("", ViewData.TemplateInfo.FormattedModelValue, new { @class = "text-box single-line wide" })
        }
        else
        {
            // use multiline text
            @Html.TextArea("", ViewData.TemplateInfo.FormattedModelValue.ToString(), new { @class = "text-box multi-line" });
        }
    }
    else
    {
        // use default style
        @Html.TextBox("", ViewData.TemplateInfo.FormattedModelValue, new { @class = "text-box single-line" })
    }
}