// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace PlantDataMVC.DAL.EF.Context
{
    using PlantDataMVC.DAL.EF.Configuration;
    using PlantDataMVC.DAL.EF.Entities;
    using PlantDataMVC.DAL.EF.Interfaces;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public partial class FakePlantDataDbContext : IPlantDataDbContext
    {
        public System.Data.Entity.DbSet<Genus> Genus { get; set; }
        public System.Data.Entity.DbSet<JournalEntry> JournalEntries { get; set; }
        public System.Data.Entity.DbSet<JournalEntryType> JournalEntryTypes { get; set; }
        public System.Data.Entity.DbSet<PlantStock> PlantStocks { get; set; }
        public System.Data.Entity.DbSet<PriceListType> PriceListTypes { get; set; }
        public System.Data.Entity.DbSet<ProductPrice> ProductPrices { get; set; }
        public System.Data.Entity.DbSet<ProductType> ProductTypes { get; set; }
        public System.Data.Entity.DbSet<SeedBatch> SeedBatches { get; set; }
        public System.Data.Entity.DbSet<SeedTray> SeedTrays { get; set; }
        public System.Data.Entity.DbSet<Site> Sites { get; set; }
        public System.Data.Entity.DbSet<Species> Species { get; set; }

        public FakePlantDataDbContext()
        {
            Genus = new FakeDbSet<Genus>("Id");
            JournalEntries = new FakeDbSet<JournalEntry>("Id");
            JournalEntryTypes = new FakeDbSet<JournalEntryType>("Id");
            PlantStocks = new FakeDbSet<PlantStock>("Id");
            PriceListTypes = new FakeDbSet<PriceListType>("Id");
            ProductPrices = new FakeDbSet<ProductPrice>("PriceListTypeId", "ProductTypeId", "DateEffective");
            ProductTypes = new FakeDbSet<ProductType>("Id");
            SeedBatches = new FakeDbSet<SeedBatch>("Id");
            SeedTrays = new FakeDbSet<SeedTray>("Id");
            Sites = new FakeDbSet<Site>("Id");
            Species = new FakeDbSet<Species>("Id");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
